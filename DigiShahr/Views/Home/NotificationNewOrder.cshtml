@model DataLayer.Models.TblOrder

@{
    ViewData["Title"] = "NotificationNewOrder";
    Layout = "~/Views/Shared/_UserLayout.cshtml";
}

<link href="~/StyleCenter/Sass/Home/Bascket.min.css" rel="stylesheet" />
<div class="my-space"></div>
<div class="matCart my-column my-clipped my-clipped-desktop">
    <div class="formTitr my-row uk-margin-top" dir="rtl">
        <h3 class="center">تایید ثبت سفارش</h3>
        <a><span class="icon-holder backIconDesktop" uk-icon="backIcon"></span></a>
    </div>
    <div class="my-column cart-section uk-padding-small" dir="rtl">
        @foreach (var item in Model.TblOrderDetails)
        {
            <div class="my-row ShoppingList" dir="rtl">
                <label>@item.Product.Name</label>
                <label class="uk-text-danger">@((item.Product.Price*item.Count).ToString("#,0 تومان"))</label>
                <div class="Count">
                    <span>@item.Count</span>
                </div>
            </div>
            <hr />
        }
        <div class="matCart successMessage center uk-margin-top uk-text-right" dir="rtl">
            <div class="my-column uk-margin-auto-left" dir="rtl">
                <label class="uk-margin-small-bottom"><span class="icon-holder uk-margin-small-left uk-text-warning" uk-icon="logo-usd"></span>مبلغ قابل پرداخت:<span>@Model.Price.ToString("#,0")<span>&nbsp;تومان</span></span></label>
                @if (Model.Status == 0)
                {
                    <label class="uk-margin-small-bottom"><span class="icon-holder uk-margin-small-left uk-text-warning" uk-icon="home"></span>تحویل درب منزل</label>
                }
                @if (Model.Status == 1)
                {
                    <label class="uk-margin-small-bottom"><span class="icon-holder uk-margin-small-left uk-text-warning" uk-icon="storefront"></span>تحویل درب فروشگاه</label>
                }
                <label class="uk-margin-small-bottom"><span class="icon-holder uk-margin-small-left uk-text-danger" uk-icon="location"></span>@Model.User.Address</label>
            </div>
        </div>
        @if ((int)Math.Floor(Model.DateSubmited.AddSeconds(Model.Store.Ability.ValidationTimeSpan).Subtract(DateTime.Now).TotalSeconds) > 0)
        {
            <div class="my-column uk-margin-top center cartInSller">
                <div class="timer">
                    <div id="app"></div>
                </div>
                <div class="my-column">
                    <a onclick="OrderSuccess(@Model.Id)" class="gradientButtonLink uk-margin-top">قبول سفارش</a>
                    <a onclick="DeleteOrder(@Model.Id)" class="gradientButtonLink uk-margin-top">رد سفارش</a>
                </div>
                <script src="~/Jquery/jquery-3.4.1.min.js"></script>
                <script>

                    function OrderSuccess(Id) {
                        $.post("/Store/OrderDeliver?Id=" + Id, function (result) {
                            if (result == "true") {
                                window.location.reload();
                            }
                        });
                    }

                    function DeleteOrder(Id) {
                        $.post("/Order/Deleted?Id=" + Id, function (result) {
                            if (result == "true") {
                                window.location.href = "/Store";
                            }
                        });
                    }

                </script>
            </div>
        }
        else if((int)Math.Floor(Model.DateSubmited.AddSeconds(Model.Store.Ability.ValidationTimeSpan).Subtract(DateTime.Now).TotalSeconds) < 0)
        {
            <script>
                $(function () {
                    $.post("/Order/Deleted?Id=" +@Model.Id, function (result) {
                        if (result == "true") {
                            window.location.reload();
                        }
                    });
                });
            </script>
        }
    </div>
</div>
<div class="my-space"></div>
@{
    var ValidationTimeSpan = (int)Math.Floor(Model.DateSubmited.AddSeconds(Model.Store.Ability.ValidationTimeSpan).Subtract(DateTime.Now).TotalSeconds);
}
@if ((int)Math.Floor(Model.DateSubmited.AddSeconds(Model.Store.Ability.ValidationTimeSpan).Subtract(DateTime.Now).TotalSeconds) > 0)
{
    <script>
    const FULL_DASH_ARRAY = 283;
    const WARNING_THRESHOLD = 10;
    const ALERT_THRESHOLD = 5;

    const COLOR_CODES = {
        info: {
            color: "green"
        },
        warning: {
            color: "orange",
            threshold: WARNING_THRESHOLD
        },
        alert: {
            color: "red",
            threshold: ALERT_THRESHOLD
        }
    };

    const TIME_LIMIT = @ValidationTimeSpan;
    let timePassed = 0;
    let timeLeft = TIME_LIMIT;
    let timerInterval = null;
    let remainingPathColor = COLOR_CODES.info.color;

    document.getElementById("app").innerHTML = `
<div class="base-timer">
  <svg class="base-timer__svg" viewBox="0 0 100 100" xmlns="http://www.w3.org/2000/svg">
    <g class="base-timer__circle">
      <circle class="base-timer__path-elapsed" cx="50" cy="50" r="45"></circle>
      <path
        id="base-timer-path-remaining"
        stroke-dasharray="283"
        class="base-timer__path-remaining ${remainingPathColor}"
        d="
          M 50, 50
          m -45, 0
          a 45,45 0 1,0 90,0
          a 45,45 0 1,0 -90,0
        "
      ></path>
    </g>
  </svg>
  <span id="base-timer-label" class="base-timer__label">${formatTime(
        timeLeft
    )}</span>
</div>
`;

    startTimer();

    function onTimesUp() {
        clearInterval(timerInterval);
    }

    function startTimer() {
        timerInterval = setInterval(() => {
            timePassed = timePassed += 1;
            timeLeft = TIME_LIMIT - timePassed;
            document.getElementById("base-timer-label").innerHTML = formatTime(
                timeLeft
            );
            setCircleDasharray();
            setRemainingPathColor(timeLeft);

            if (timeLeft === 0) {
                onTimesUp();
            }
        }, 1000);
    }

    function formatTime(time) {
        const minutes = Math.floor(time / 60);
        let seconds = time % 60;

        if (seconds < 10) {
            seconds = `0${seconds}`;
        }

        return `${minutes}:${seconds}`;
    }

    function setRemainingPathColor(timeLeft) {
        const { alert, warning, info } = COLOR_CODES;
        if (timeLeft <= alert.threshold) {
            document
                .getElementById("base-timer-path-remaining")
                .classList.remove(warning.color);
            document
                .getElementById("base-timer-path-remaining")
                .classList.add(alert.color);
        } else if (timeLeft <= warning.threshold) {
            document
                .getElementById("base-timer-path-remaining")
                .classList.remove(info.color);
            document
                .getElementById("base-timer-path-remaining")
                .classList.add(warning.color);
        }
    }

    function calculateTimeFraction() {
        const rawTimeFraction = timeLeft / TIME_LIMIT;
        return rawTimeFraction - (1 / TIME_LIMIT) * (1 - rawTimeFraction);
    }

    function setCircleDasharray() {
        const circleDasharray = `${(
            calculateTimeFraction() * FULL_DASH_ARRAY
        ).toFixed(0)} 283`;
        document
            .getElementById("base-timer-path-remaining")
            .setAttribute("stroke-dasharray", circleDasharray);
    }
    </script>
}


