@model DataLayer.Models.TblOrder
@{
    ViewData["Title"] = "سبد خرید";
    Layout = "~/Views/Shared/_UserLayout.cshtml";
}
<link href="~/StyleCenter/Sass/Home/Bascket.min.css" rel="stylesheet" />
@if (Model != null)
{
    <div class="my-space"></div>
    <div class="matCart my-column my-clipped">
        <div class="formTitr my-row uk-margin-top" dir="rtl">
            <h3 class="center">سبد خرید</h3>
            <a><span class="icon-holder" uk-icon="backIcon"></span></a>
        </div>
        <div class="my-column cart-section uk-padding-small" dir="rtl">
            @foreach (var item in Model.TblOrderDetails)
            {
                <div class="my-row ShoppingList" dir="rtl">
                    <label>@item.Product.Name</label>
                    <label class="uk-text-danger">@((item.Product.Price*item.Product.Count).ToString("#,0 تومان"))</label>
                    <div class="Count">
                        <a><span class="icon-holder uk-margin-small-left" uk-icon="add"></span></a>
                        <span>@item.Count</span>
                        <a><span class="icon-holder uk-margin-small-right" uk-icon="remove"></span></a>
                    </div>
                </div>
                <hr />
            }
            <hr class="uk-divider-icon uk-margin-remove-bottom" />
            <div class="uk-margin-small-right" dir="rtl">
                <label class="uk-margin-small-bottom" for="delivery">انتخاب نحوه تحویل و تسویه:</label>
                <div class="delivery uk-grid-small uk-child-width-auto uk-grid">
                    @if (Model.Store.Ability.TahvilVaTasvieDarMahal == 1)
                    {
                        <label><input class="uk-checkbox uk-margin-remove-top" type="radio" name="delivery"> تحویل و تسویه درب منزل</label>
                    }
                    @if (Model.Store.Ability.TahvilVaTasvieDarForushgah == 1)
                    {
                        <label><input class="uk-checkbox uk-margin-remove-top" type="radio" name="delivery" checked> تحویل و تسویه در محل فروشگاه</label>
                    }
                </div>
            </div>
            <hr class="uk-divider-icon uk-margin-remove-top" />
            <input class="uk-input uk-border-rounded" type="text" placeholder="کد تخفیف (در صورت وجود)..">
            <label class="uk-text-danger center uk-margin-top">قیمت مجموع سفارشات: <span>@Model.Price.ToString("#,0 ") هزار تومان</span></label>
            <button class="gradientButton center uk-margin-top uk-margin-bottom">تکمیل سفارش و ارسال برای فروشنده</button>
            @*<div class="my-row uk-margin-top">
                    <div class="timer">
                        <div id="app"></div>
                    </div>
                    <div class="price my-column gradientButton uk-text-center uk-padding-small">
                        <label>مبلغ قابل پرداخت:</label>
                        <span>8797<span>&nbsp;تومان</span></span>
                    </div>
                </div>*@
        </div>
    </div>
    <div class="my-space"></div>
}
else
{
    <div class="my-space"></div>
    <div class="matCart my-column my-clipped">
        <div class="formTitr my-row uk-margin-top" dir="rtl">
            <h3 class="center">سبد خرید</h3>
            <a><span class="icon-holder" uk-icon="backIcon"></span></a>
        </div>
        <div class="my-column cart-section uk-padding-small" dir="rtl">
           
                <div class="my-row ShoppingList" dir="rtl">
                    <label></label>
                    <label class="uk-text-danger">سبد خرید شما خالی است</label>
                    <div class="Count">
                        @*<a><span class="icon-holder uk-margin-small-left" uk-icon="add"></span></a>
                        <span></span>
                        <a><span class="icon-holder uk-margin-small-right" uk-icon="remove"></span></a>*@
                    </div>
                </div>
                <hr />
            
            <hr class="uk-divider-icon uk-margin-remove-bottom" />
            @*<div class="uk-margin-small-right" dir="rtl">
                <label class="uk-margin-small-bottom" for="delivery">انتخاب نحوه تحویل و تسویه:</label>
                <div class="delivery uk-grid-small uk-child-width-auto uk-grid">
                    
                </div>
            </div>*@
            
            @*<div class="my-row uk-margin-top">
                    <div class="timer">
                        <div id="app"></div>
                    </div>
                    <div class="price my-column gradientButton uk-text-center uk-padding-small">
                        <label>مبلغ قابل پرداخت:</label>
                        <span>8797<span>&nbsp;تومان</span></span>
                    </div>
                </div>*@
        </div>
    </div>
    <div class="my-space"></div>
}
@*<script>
        const FULL_DASH_ARRAY = 283;
        const WARNING_THRESHOLD = 10;
        const ALERT_THRESHOLD = 5;

        const COLOR_CODES = {
            info: {
                color: "green"
            },
            warning: {
                color: "orange",
                threshold: WARNING_THRESHOLD
            },
            alert: {
                color: "red",
                threshold: ALERT_THRESHOLD
            }
        };

        const TIME_LIMIT = 20;
        let timePassed = 0;
        let timeLeft = TIME_LIMIT;
        let timerInterval = null;
        let remainingPathColor = COLOR_CODES.info.color;

        document.getElementById("app").innerHTML = `
    <div class="base-timer">
      <svg class="base-timer__svg" viewBox="0 0 100 100" xmlns="http://www.w3.org/2000/svg">
        <g class="base-timer__circle">
          <circle class="base-timer__path-elapsed" cx="50" cy="50" r="45"></circle>
          <path
            id="base-timer-path-remaining"
            stroke-dasharray="283"
            class="base-timer__path-remaining ${remainingPathColor}"
            d="
              M 50, 50
              m -45, 0
              a 45,45 0 1,0 90,0
              a 45,45 0 1,0 -90,0
            "
          ></path>
        </g>
      </svg>
      <span id="base-timer-label" class="base-timer__label">${formatTime(
            timeLeft
        )}</span>
    </div>
    `;

        startTimer();

        function onTimesUp() {
            clearInterval(timerInterval);
        }

        function startTimer() {
            timerInterval = setInterval(() => {
                timePassed = timePassed += 1;
                timeLeft = TIME_LIMIT - timePassed;
                document.getElementById("base-timer-label").innerHTML = formatTime(
                    timeLeft
                );
                setCircleDasharray();
                setRemainingPathColor(timeLeft);

                if (timeLeft === 0) {
                    onTimesUp();
                }
            }, 1000);
        }

        function formatTime(time) {
            const minutes = Math.floor(time / 60);
            let seconds = time % 60;

            if (seconds < 10) {
                seconds = `0${seconds}`;
            }

            return `${minutes}:${seconds}`;
        }

        function setRemainingPathColor(timeLeft) {
            const { alert, warning, info } = COLOR_CODES;
            if (timeLeft <= alert.threshold) {
                document
                    .getElementById("base-timer-path-remaining")
                    .classList.remove(warning.color);
                document
                    .getElementById("base-timer-path-remaining")
                    .classList.add(alert.color);
            } else if (timeLeft <= warning.threshold) {
                document
                    .getElementById("base-timer-path-remaining")
                    .classList.remove(info.color);
                document
                    .getElementById("base-timer-path-remaining")
                    .classList.add(warning.color);
            }
        }

        function calculateTimeFraction() {
            const rawTimeFraction = timeLeft / TIME_LIMIT;
            return rawTimeFraction - (1 / TIME_LIMIT) * (1 - rawTimeFraction);
        }

        function setCircleDasharray() {
            const circleDasharray = `${(
                calculateTimeFraction() * FULL_DASH_ARRAY
            ).toFixed(0)} 283`;
            document
                .getElementById("base-timer-path-remaining")
                .setAttribute("stroke-dasharray", circleDasharray);
        }
    </script>*@

